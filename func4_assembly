%eax = x, %esi = y, %edi = z

0000000000400fce <func4>:
  400fce:	48 83 ec 08          	sub    $0x8,%rsp		# allocate 8 byte on Stack
  400fd2:	89 d0                	mov    %edx,%eax		# x = 14
  400fd4:	29 f0                	sub    %esi,%eax		# x = x - y
  400fd6:	89 c1                	mov    %eax,%ecx		# tmp = x
  400fd8:	c1 e9 1f             	shr    $0x1f,%ecx		# tmp = tmp >> 31
  400fdb:	01 c8                	add    %ecx,%eax		# x = x + tmp
  400fdd:	d1 f8                	sar    %eax			# x = x >> 1
  400fdf:	8d 0c 30             	lea    (%rax,%rsi,1),%ecx	# tmp = x + y
  400fe2:	39 f9                	cmp    %edi,%ecx		# compage tmp:z
  400fe4:	7e 0c                	jle    400ff2 <func4+0x24>	# if <=, goto 400ff2
  400fe6:	8d 51 ff             	lea    -0x1(%rcx),%edx		# 
  400fe9:	e8 e0 ff ff ff       	callq  400fce <func4>		# else func_4(x-1, y, z)
  400fee:	01 c0                	add    %eax,%eax		# x = 2*x
  400ff0:	eb 15                	jmp    401007 <func4+0x39>	# return
  400ff2:	b8 00 00 00 00       	mov    $0x0,%eax		# x = 0
  400ff7:	39 f9                	cmp    %edi,%ecx		# compare tmp:z
  400ff9:	7d 0c                	jge    401007 <func4+0x39>	# if >=, return
  400ffb:	8d 71 01             	lea    0x1(%rcx),%esi		#
  400ffe:	e8 cb ff ff ff       	callq  400fce <func4>		# else func_4(x, tmp+1, z)
  401003:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax	# x = 2*x + 1
  401007:	48 83 c4 08          	add    $0x8,%rsp		# deallocate 8 byte from Stack
  40100b:	c3                   	retq   				# return x

