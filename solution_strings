1. Lösungsstring: "Border relations with Canada have never been better."

Der erste Lösungs String für Phase 1 lässt sich einfach dem Assembler Code 
von Phase 1 entnehmen.

Phase 1 läd die Adresse für den Eingabe String nach Register %eax
und vergleicht diesen mit einem String mit der festen Adresse 0x402400,
welche ins Register %esi geladen wird.

Um den String in an dieser Adresse auszulesen startet man gdb bomb.
Mit x /53c 0x402400 kann man sich dann 53 Chars ab Adresse 402400 ausgeben
lassen. 

2. Lösungsstring: "1 2 4 8 16 32"

Der zweite String lässt sich auf Grund von Berechnungen in Funktion phase_2 ableiten.
Zunächst ruft die Funktion eine Hilfsfunktion namens "read_six_numbers". Diese
Funktion benutzt die C-Funktion sscanf um sechs Integer aus dem Eingabestring zu entnehmen.
Darauß lässt sich schließen, dass der Lösungsstring "%d %d %d %d %d %d" formatiert ist.
Also aus sechs Zahlen besteht.
Zurück in der Funktion phase_2 werden diese Zahlen mittels einer Schleife auf bestimmte
Begebenheiten überprüft. Bei Analyse des Assembler Codes stellt sich raus, dass die
erste Zahl auf Gleichheit mit 1 geprüft wird. Alle weiteren Zahlen werden mittels einer
Schleife darauf geprüft, ob sie das Doppelte ihrere Vorgängerzahl sind.

3. Lösungsstring: "1 311"

Wieder wird der Eingabestring mit sscanf eingelesen und nach einem Format-String
ausgewertet. Der Format-String wird im Register %esi an sscanf übergeben und
lautet "%d %d". Darauß lässt sich schließen, dass der Lösungsstring 2 Integer
enthält. Nach dem Aufruf von sscanf wird überprüft ob auch wirklich zwei Integer
gescant wurden. Als nächstes folgt ein Switchstatement bzw. eine Jumptable.
Dabei dient der erste eingegebene Wert als Case. Der erste Wert kann zwischen
0 und 6 liegen. Nimmt man Case 1, so wird der zweite Wert mit 0x137 (Dec: 311)
verglichen. Sind sie gleich ist die 3. Phase damit beendet.
